"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pascalCase = exports.titleFormat = exports.camelCase = exports.upperCaseSnakeCase = void 0;
var voca_1 = __importDefault(require("voca"));
/**
 * Convert a string to the uppercase snake case. This format is used e. g. for static properties on entity classes.
 *
 * @param str - The string to be transformed.
 * @returns The input string in the case used by static methods on entity-classes.
 */
function upperCaseSnakeCase(str) {
    return voca_1.default.upperCase(voca_1.default.snakeCase(str));
}
exports.upperCaseSnakeCase = upperCaseSnakeCase;
/**
 * Convert a string to camelCase. This format used e. g. for properties on entity class instances.
 *
 * @param str - The string to be transformed.
 * @returns The transformed string.
 */
function camelCase(str) {
    return voca_1.default.camelCase(str);
}
exports.camelCase = camelCase;
/**
 * Convert a string to a human readable format, e.g. it transforms `to_BusinessPartner` to `To Business Partner`.
 *
 * @param str - The string to be transformed.
 * @returns The transformed string.
 */
function titleFormat(str) {
    return voca_1.default.titleCase(voca_1.default.words(str).join(' '));
}
exports.titleFormat = titleFormat;
/**
 * Convert a string to pascal case. This format is used e. g. for types.
 * @param str - The string to be transformed.
 * @returns The transformed string.
 */
function pascalCase(str) {
    return voca_1.default
        .words(str)
        .map(function (word) { return voca_1.default.capitalize(word); })
        .join('');
}
exports.pascalCase = pascalCase;
//# sourceMappingURL=string-formatter.js.map