import { DecodedJWT, JwtKeyMapping } from './jwt';
/**
 * Representation of the user i.e. authenticated persona. The authentication is done by the XSUAA.
 */
export interface UserData {
    id: string;
    userName: string;
    givenName?: string;
    familyName?: string;
    email?: string;
    scopes: Scope[];
    customAttributes: Map<string, string[]>;
}
export interface User extends UserData {
    hasScope: (scope: Scope) => boolean;
}
/**
 * Extracts the custom attributes in the JWT
 * @param decodedToken - Token to read the custom attributes
 * @returns custom attributes added by the xsuaa to the issued JWT.
 */
export declare function customAttributes(decodedToken: DecodedJWT): Map<string, string[]>;
/**
 * Mapping between key name in the User and key name in decoded JWT and the
 */
export declare const mappingUserFields: JwtKeyMapping<UserData, RegisteredJWTClaimsUser>;
/**
 * Get the user's given name of a decoded JWT.
 * @param decodedToken - Token to read the user id from.
 * @returns The user id if available.
 */
export declare function userGivenName(decodedToken: DecodedJWT): string | undefined;
/**
 * Get the user's family name of a decoded JWT.
 * @param decodedToken - Token to read the user id from.
 * @returns The user id if available.
 */
export declare function userFamilyName(decodedToken: DecodedJWT): string | undefined;
/**
 * Get the user name of a decoded JWT.
 * @param decodedToken - Token to read the user id from.
 * @returns The user id if available.
 */
export declare function userName(decodedToken: DecodedJWT): string | undefined;
/**
 * Get the user's email of a decoded JWT.
 * @param decodedToken - Token to read the user id from.
 * @returns The user id if available.
 */
export declare function userEmail(decodedToken: DecodedJWT): string | undefined;
/**
 * Get the user's scopes of a decoded JWT.
 * @param decodedToken - Token to read the user id from.
 * @returns The user id if available.
 */
export declare function userScopes(decodedToken: DecodedJWT): Scope[] | [];
/**
 * Get the user id of a decoded JWT.
 * @param decodedToken - Token to read the user id from.
 * @returns The user id if available.
 */
export declare function userId(decodedToken: DecodedJWT): string | undefined;
/**
 * Keys in the JWT related to the user
 */
export interface RegisteredJWTClaimsUser {
    user_id?: string;
    user_name?: string;
    given_name?: string;
    family_name?: string;
    email?: string;
    scope?: string[];
    'xs.user.attributes'?: Map<string, string[]>;
}
/**
 * Representation of the scope. A scope is assigned to a user via role-collection in cloud foundry.
 */
export interface Scope {
    name: string;
}
/**
 * Creates a user object from the decoded JWT.
 *
 * @param decodedJWT - Decoded JWT toeken
 * @returns Representation of the user
 * @exception Error Raised if no id is found in the decoded JWT.
 */
export declare function userFromJwt(decodedJWT: DecodedJWT): User;
//# sourceMappingURL=user.d.ts.map