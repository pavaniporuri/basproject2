"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.userFromJwt = exports.userId = exports.userScopes = exports.userEmail = exports.userName = exports.userFamilyName = exports.userGivenName = exports.mappingUserFields = exports.customAttributes = void 0;
var jwt_1 = require("./jwt");
/**
 * Extracts the custom attributes in the JWT
 * @param decodedToken - Token to read the custom attributes
 * @returns custom attributes added by the xsuaa to the issued JWT.
 */
function customAttributes(decodedToken) {
    if (decodedToken[exports.mappingUserFields.customAttributes.keyInJwt]) {
        return jwt_1.readPropertyWithWarn(decodedToken, exports.mappingUserFields.customAttributes.keyInJwt);
    }
    return new Map();
}
exports.customAttributes = customAttributes;
/**
 * Mapping between key name in the User and key name in decoded JWT and the
 */
exports.mappingUserFields = {
    id: { keyInJwt: 'user_id', extractorFunction: userId },
    userName: { keyInJwt: 'user_name', extractorFunction: userName },
    givenName: { keyInJwt: 'given_name', extractorFunction: userGivenName },
    familyName: { keyInJwt: 'family_name', extractorFunction: userFamilyName },
    email: { keyInJwt: 'email', extractorFunction: userEmail },
    scopes: { keyInJwt: 'scope', extractorFunction: userScopes },
    customAttributes: {
        keyInJwt: 'xs.user.attributes',
        extractorFunction: customAttributes
    }
};
/**
 * Get the user's given name of a decoded JWT.
 * @param decodedToken - Token to read the user id from.
 * @returns The user id if available.
 */
function userGivenName(decodedToken) {
    if (exports.mappingUserFields.givenName) {
        return jwt_1.readPropertyWithWarn(decodedToken, exports.mappingUserFields.givenName.keyInJwt);
    }
}
exports.userGivenName = userGivenName;
/**
 * Get the user's family name of a decoded JWT.
 * @param decodedToken - Token to read the user id from.
 * @returns The user id if available.
 */
function userFamilyName(decodedToken) {
    if (exports.mappingUserFields && exports.mappingUserFields.familyName) {
        return jwt_1.readPropertyWithWarn(decodedToken, exports.mappingUserFields.familyName.keyInJwt);
    }
}
exports.userFamilyName = userFamilyName;
/**
 * Get the user name of a decoded JWT.
 * @param decodedToken - Token to read the user id from.
 * @returns The user id if available.
 */
function userName(decodedToken) {
    return jwt_1.readPropertyWithWarn(decodedToken, exports.mappingUserFields.userName.keyInJwt);
}
exports.userName = userName;
/**
 * Get the user's email of a decoded JWT.
 * @param decodedToken - Token to read the user id from.
 * @returns The user id if available.
 */
function userEmail(decodedToken) {
    if (exports.mappingUserFields && exports.mappingUserFields.email) {
        return jwt_1.readPropertyWithWarn(decodedToken, exports.mappingUserFields.email.keyInJwt);
    }
}
exports.userEmail = userEmail;
/**
 * Get the user's scopes of a decoded JWT.
 * @param decodedToken - Token to read the user id from.
 * @returns The user id if available.
 */
function userScopes(decodedToken) {
    if (!(decodedToken.scope instanceof Array && decodedToken.scope.length)) {
        return [];
    }
    return decodedToken.scope
        .map(function (s) { return (s.includes('.') ? s.substr(s.indexOf('.') + 1, s.length) : s); })
        .map(function (s) { return ({ name: s }); });
}
exports.userScopes = userScopes;
/**
 * Get the user id of a decoded JWT.
 * @param decodedToken - Token to read the user id from.
 * @returns The user id if available.
 */
function userId(decodedToken) {
    return jwt_1.readPropertyWithWarn(decodedToken, exports.mappingUserFields.id.keyInJwt);
}
exports.userId = userId;
function hasScopeWrapper(scopes) {
    return function (scope) {
        return scopes.find(function (scopeFromList) { return scopeFromList.name === scope.name; }) !==
            undefined;
    };
}
/**
 * Creates a user object from the decoded JWT.
 *
 * @param decodedJWT - Decoded JWT toeken
 * @returns Representation of the user
 * @exception Error Raised if no id is found in the decoded JWT.
 */
function userFromJwt(decodedJWT) {
    jwt_1.checkMandatoryValue('id', exports.mappingUserFields, decodedJWT);
    jwt_1.checkMandatoryValue('userName', exports.mappingUserFields, decodedJWT);
    return {
        id: userId(decodedJWT),
        givenName: userGivenName(decodedJWT),
        familyName: userFamilyName(decodedJWT),
        email: userEmail(decodedJWT),
        userName: userName(decodedJWT),
        scopes: userScopes(decodedJWT),
        customAttributes: customAttributes(decodedJWT),
        hasScope: hasScopeWrapper(userScopes(decodedJWT))
    };
}
exports.userFromJwt = userFromJwt;
//# sourceMappingURL=user.js.map