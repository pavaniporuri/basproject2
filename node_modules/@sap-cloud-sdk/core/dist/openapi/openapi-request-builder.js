"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenApiRequestBuilder = void 0;
var http_client_1 = require("../http-client");
/**
 * @experimental This API is experimental and might change in newer versions. Use with caution.
 * Generic request builder for building and executing requests based on apis generated by the OpenAPI generator.
 * @typeparam ApiT Interface of the generated api. All properties of the interface will be treated as functions.
 * @typeparam FnT Literal string type of the function name, must be a key of `ApiT` and represent a function.
 */
var OpenApiRequestBuilder = /** @class */ (function () {
    /**
     * Create an instance of `RestRequestBuilder`.
     * @param apiConstructor Constructor of the underlying OpenApi api definition.
     * @param fn Name of the function represented in thie request builder.
     * @param args Arguments to pass to the api function.
     */
    function OpenApiRequestBuilder(apiConstructor, fn) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        this.apiConstructor = apiConstructor;
        this.fn = fn;
        this.customHeaders = {};
        this.args = args;
    }
    /**
     * Add custom headers to the request. If a header field with the given name already exists it is overwritten.
     *
     * @param headers Key-value pairs denoting additional custom headers
     * @returns The request builder itself, to facilitate method chaining
     */
    OpenApiRequestBuilder.prototype.addCustomHeaders = function (headers) {
        var _this = this;
        Object.entries(headers).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            _this.customHeaders[key.toLowerCase()] = value;
        });
        return this;
    };
    /**
     * Execute request and get a raw AxiosResponse, including all information about the HTTP response.
     * This especially comes in handy, when you need to access the headers or status code of the response.
     * @param destination Destination to execute the request against.
     * @param options Options to employ when fetching destinations.
     * @returns A promise resolving to an AxiosResponse.
     */
    OpenApiRequestBuilder.prototype.executeRaw = function (destination) {
        return __awaiter(this, void 0, void 0, function () {
            var requestConfig, api, fn;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, http_client_1.buildAxiosRequestConfig(destination, {
                            headers: this.customHeaders
                        })];
                    case 1:
                        requestConfig = _a.sent();
                        api = new this.apiConstructor({ baseOptions: requestConfig }, requestConfig.baseURL);
                        fn = api[this.fn];
                        if (typeof fn === 'function') {
                            return [2 /*return*/, fn.apply(api, this.args)];
                        }
                        throw new Error("Could not execute request. '" + this.fn + "' is not a function of " + this.apiConstructor.name + ".");
                }
            });
        });
    };
    /**
     * Execute request and get the response data. Use this to conveniently access the data of a service without technical information about the response.
     * @param destination Destination to execute the request against.
     * @param options Options to employ when fetching destinations.
     * @returns A promise resolving to the requested return type.
     */
    OpenApiRequestBuilder.prototype.execute = function (destination) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.executeRaw(destination)];
                    case 1:
                        response = _a.sent();
                        if (isAxiosResponse(response)) {
                            return [2 /*return*/, response.data];
                        }
                        throw new Error('Could not access response data. Response was not an axios response.');
                }
            });
        });
    };
    return OpenApiRequestBuilder;
}());
exports.OpenApiRequestBuilder = OpenApiRequestBuilder;
function isAxiosResponse(val) {
    return 'data' in val;
}
//# sourceMappingURL=openapi-request-builder.js.map