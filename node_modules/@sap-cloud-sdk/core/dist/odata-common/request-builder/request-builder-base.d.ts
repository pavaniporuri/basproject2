import { Destination, DestinationNameAndJwt, DestinationRetrievalOptions } from '../../connectivity/scp-cf';
import { ODataRequest } from '../request/odata-request';
import { ODataRequestConfig } from '../request/odata-request-config';
/**
 * Base class for all request builders.
 *
 * @typeparam EntityT - Type of the entity to create a request for
 */
export declare abstract class MethodRequestBuilder<RequestConfigT extends ODataRequestConfig = any> {
    requestConfig: RequestConfigT;
    /**
     * Creates an instance of MethodRequestBuilder.
     *
     * @param requestConfig - Request configuration to initialize with
     */
    constructor(requestConfig: RequestConfigT);
    /**
     * Create the url based on configuration of the given builder.
     *
     * @param destination - Destination to execute the request against
     * @param options - Options to employ when fetching destinations.
     * @returns Promise resolving to the url for the request
     */
    url(destination: Destination | DestinationNameAndJwt, options?: DestinationRetrievalOptions): Promise<string>;
    /**
     * Create the relative url based on configuration of the given builder.
     *
     * @returns The relative url for the request
     */
    relativeUrl(): string;
    /**
     * Add custom headers to the request.
     *
     * @param headers - Key-value pairs denoting additional custom headers
     * @returns The request builder itself, to facilitate method chaining
     * @deprecated Since version 1.34.0 Use [[addCustomHeaders]] instead.
     */
    withCustomHeaders(headers: Record<string, string>): this;
    /**
     * Add custom headers to the request. Existing headers will be overwritten.
     *
     * @param headers - Key-value pairs denoting additional custom headers.
     * @returns The request builder itself, to facilitate method chaining.
     */
    addCustomHeaders(headers: Record<string, string>): this;
    /**
     * Add custom query parameters to the request.
     *
     * @param queryParameters - Key-value pairs denoting additional custom query parameters to be set in the request
     * @returns The request builder itself, to facilitate method chaining
     * @deprecated Since version 1.34.0 Use [[addCustomQueryParameters]] instead.
     */
    withCustomQueryParameters(queryParameters: Record<string, string>): this;
    /**
     * Add custom query parameters to the request. If a query parameter with the given name already exists it is overwritten.
     *
     * @param queryParameters - Key-value pairs denoting additional custom query parameters to be set in the request
     * @returns The request builder itself, to facilitate method chaining
     */
    addCustomQueryParameters(queryParameters: Record<string, string>): this;
    /**
     * Replace the default service path with the given custom path.
     * In case of the S/4HANA apis the servicePath defaults to '/sap/opu/odata/sap/<SERVICE_NAME>' and can be overwritten here.
     *
     * @param servicePath - Path to override the default with
     * @returns The request builder itself, to facilitate method chaining
     * @deprecated Since version 1.34.0 Use [[setCustomServicePath]] instead.
     */
    withCustomServicePath(servicePath: string): this;
    /**
     * Replace the default service path with the given custom path.
     * In case of the S/4HANA apis the servicePath defaults to '/sap/opu/odata/sap/<SERVICE_NAME>' and can be overwritten here.
     *
     * @param servicePath - Path to override the default with
     * @returns The request builder itself, to facilitate method chaining
     */
    setCustomServicePath(servicePath: string): this;
    build(): ODataRequest<RequestConfigT>;
    build(destination: Destination | DestinationNameAndJwt, options?: DestinationRetrievalOptions): Promise<ODataRequest<RequestConfigT>>;
}
export { MethodRequestBuilder as MethodRequestBuilderBase };
//# sourceMappingURL=request-builder-base.d.ts.map