
module.exports = (srv) => {
  for (const each of srv.operations) {
    add_handler_for (srv, each)
  }
  for (const each of srv.entities) {
    for (const a in each.actions) {
      add_handler_for (srv, each.actions[a])
    }
  }
}

const add_handler_for = (srv, def) => {
  const event = def.name.match(/\w*$/)[0]
  const method = srv[event]
  if (method) {
    // use existing method as handler
    if (method._handled || method.name in srv.__proto__) return
    srv.on (event, ({data}) => {
      const args = []; for (let p in data) args.push(data[p])
      return method (...args)
    })
    method._handled = true
  } else {
    // add method to emit request
    const method = srv[event] = function (...args) {
      const [$] = args, target = this.entities [ $ && $.name ? $.name.match(/\w*$/)[0] : $ ]
      const data = {}
      if (target) {
        def = target.actions[event]; args.shift()
        for (let p in target.keys) data[p] = args.shift()
      }
      for (let p in def.params) data[p] = args.shift()
      return this.send ({ event, target, data })
    }
    method._handled = true
  }
}
