
const cds = require('..')
const { path4 } = cds.serve
const { isfile, readFileSync, path: {join, normalize, dirname} } = cds.utils

// Produces information on provided services in the model:
//   name, expected URL path at runtime,...
module.exports = (model) => {
  model = cds.reflect (model)
  return model.all ('service').map (service => {
    return {
      name: service.name,
      urlPath: _urlPath4 (service, model), // the URL path that is *likely* effective at runtime
      destination: 'srv-api' // the name to register in xs-app.json.  TODO align this w/ deployment manifest
    }
  })
}

function _urlPath4 (service, model) {
  const p = _javaPath4(service, model) || path4(service)
  //  /foo/bar  ->  foo/bar/
  return normalize (p.replace(/^\/+/, '') + '/')
}

function _javaPath4 (service, model) {
  const isJava = model._sources.find (s => isfile (join (dirname(s), 'pom.xml')))
  if (isJava)  {
    let path = service.name
    const def = model.definitions[service.name]
    if (def && def['@path']) {
      path = def['@path'].replace(/^[^/]/, c => '/'+c)
    }
    const prefix = _javaPrefix(model)
    return join(prefix, path).replace(/\\/g, '/')
  }
}

function _javaPrefix(model) {
  const appConfigFile = model._sources.map (s => {
    const file = join (dirname(s), 'src/main/resources/application.yaml')
    if (isfile (file))  return file
  }).find(f => f)
  if (appConfigFile) {
    const yaml = require('@sap/cds-foss')('yaml')
    for (const doc of yaml.parseAllDocuments(readFileSync(appConfigFile).toString())) {
      const {cds} = doc.toJSON()
      const path = cds && (cds['odata-v4.endpoint.path'] || cds['odata-v2.endpoint.path'])
      if (path)  return path
    }
  }
  return 'odata/v4/'
}
