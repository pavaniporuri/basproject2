
module.exports = { get html(){

  const cds = require('../lib')
  const { find, path, readFileSync } = cds.utils, {app} = cds.env.folders
  const odata = srv => Object.keys(srv._adapters).find (a => a.startsWith ('odata'))
  const metadata = srv => odata(srv) ? ` / <a href="${srv.path}/$metadata">$metadata</a>` : ``

  const html = readFileSync(path.join(__dirname,'index.html'),'utf-8')
  // .replace ('{{subtitle}}', 'Version ' + cds.version)
  .replace (/{{package}}/g, _project())
  .replace (/{{app}}/g, app.replace(/*trailing slash*/ /\/$/, ''))
  .replace ('{{apps}}', find (app, ['*.html', '*/*.html', '*/*/*.html']).map(
    file => path.relative(app, file).replace (/\\/g,'/')).map(
      html => `\n<li><a href="${html}">/${html}</a></li>`
    ).join('\n') || '— none —'
  )
  .replace ('{{services}}', cds.service.providers.map (srv => `
    <h3>
      <a href="${srv.path}">${srv.path}</a>${metadata(srv)} ${_moreLinks(srv)}
    </h3>
    <ul>${_entities_in(srv).map (e => {
      return `
      <li>
        <a href="${srv.path}/${e}?$top=11">${e}</a> ${_moreLinks(srv, e)}
      </li>`}).join('')}
    </ul>
  `) .join(''))

  Object.defineProperty (this,'html',{value:html})
  return html

}}

function _entities_in (service) {
  const exposed=[], {entities} = service
  for (let each in entities) {
    const e = entities [each]
    if (e['@cds.autoexposed'] && !e['@cds.autoexpose'])  continue
    if (e.name.endsWith('DraftAdministrativeData'))  continue
    if (e.name.endsWith('_texts'))  continue
    exposed.push (each)
  }
  return exposed
}

function _moreLinks (srv, entity) {
  return (srv.$linkProviders || [])
    .map (linkProv => linkProv(entity))
    .filter (l => l && l.href && l.name)
    .sort ((l1, l2) => l1.name.localeCompare(l2))
    .map (l => ` <a class="preview" href="${l.href}" title="${l.title||l.name}"> &rarr; ${l.name} preview </a>`)
    .join (' ')
}

function _project(){
  const cwd = process.cwd()
  try {
    const pj = require(cwd+'/package.json')
    return `${pj.name} ${pj.version}`
  } catch(e) {
    return `${cwd}`
  }
}
