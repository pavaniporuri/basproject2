const cds = require('../../cds')
const LOG = cds.log('messaging')

const optionsManagement = require('./options-management.js')
const authorizedRequest = require('../common-utils/authorizedRequest')

class EMManagement {
  constructor(options) {
    this.options = optionsManagement(options)
    this.queueConfig = options.queueConfig
  }

  putQueue(queueName) {
    return authorizedRequest({
      method: 'PUT',
      uri: this.options.uri,
      path: `/hub/rest/api/v1/management/messaging/queues/${encodeURIComponent(queueName)}`,
      oa2: this.options.oa2,
      dataObj: this.queueConfig,
      attemptInfo: () => LOG._debug && LOG.debug('Putting queue "' + queueName + '".'),
      rejectString: `Queue "${queueName}" could not be created.`,
      successString: `Queue "${queueName}" created.`,
      tokenStore: this
    })
  }

  addSubscription(queueName, topicPattern) {
    return authorizedRequest({
      method: 'PUT',
      uri: this.options.uri,
      path: `/hub/rest/api/v1/management/messaging/queues/${encodeURIComponent(
        queueName
      )}/subscriptions/${encodeURIComponent(topicPattern)}`,
      oa2: this.options.oa2,
      attemptInfo: () =>
        LOG._debug && LOG.debug('Adding subscription "' + topicPattern + '" to queue "' + queueName + '".'),
      rejectString: `Subscription "${topicPattern}" could not be added to queue "${queueName}".`,
      successString: `Subscription "${topicPattern}" added to queue "${queueName}".`,
      tokenStore: this
    })
  }

  deleteQueue(queueName) {
    return authorizedRequest({
      method: 'DELETE',
      uri: this.options.uri,
      path: `/hub/rest/api/v1/management/messaging/queues/${encodeURIComponent(queueName)}`,
      oa2: this.options.oa2,
      attemptInfo: () => LOG._debug && LOG.debug('Deleting queue "' + queueName + '".'),
      rejectString: `Queue "${queueName}" could not be deleted.`,
      successString: `Queue "${queueName}" deleted.`,
      tokenStore: this
    })
  }
}

module.exports = EMManagement
