const cds = require('../../../../cds')

const ODataRequest = require('../ODataRequest')

const {
  Components: { DATA_CREATE_HANDLER }
} = require('../okra/odata-server')

const { getSapMessages } = require('../../../../common/error/frontend')
const { validateResourcePath } = require('../utils/request')
const { removeContainmentKeys } = require('../utils/handlerUtils')
const autoExpandToOne = require('../utils/autoExpandToOne')
const readAfterWrite = require('../utils/readAfterWrite')
const { toODataResult, getVirtualsFromResult, addEtags } = require('../utils/result')

/**
 * The handler that will be registered with odata-v4.
 * @param {Service} service
 * @param {Object} options
 * @return {Function}
 */
const create = (service, options) => {
  return async (odataReq, odataRes, next) => {
    let req
    try {
      validateResourcePath(odataReq, options, service.model)
      req = new ODataRequest(DATA_CREATE_HANDLER, service, odataReq, odataRes)
    } catch (e) {
      return next(e)
    }

    let tx
    const changeset = odataReq.getAtomicityGroupId()
    if (changeset) {
      tx = odataReq.getBatchApplicationData().txs[changeset]
    } else {
      cds.context = tx = service.tx(req)
    }

    let result, err, commit
    try {
      result = await tx.dispatch(req)

      // REVISIT: find better solution
      if (req._.readAfterWrite) {
        const dataInDb = await readAfterWrite(req, service)
        // augment data in db so values of virtual properties are kept
        const virtuals = getVirtualsFromResult(req.target, result)
        result = Object.assign(dataInDb[0] || result, virtuals)
      }

      addEtags(odataReq, req, result, service)
      autoExpandToOne(req.target, result)
      removeContainmentKeys(service, req.target, result)

      if (!changeset) {
        commit = true
        await tx.commit(result)
      } else {
        // for passing into commit
        odataReq.getBatchApplicationData().results[changeset].push({ result, req })
      }
    } catch (e) {
      err = e
      if (!changeset && !commit) {
        // ignore rollback error, which should never happen
        await tx.rollback(e).catch(() => {})
      } else if (changeset) {
        // for passing into rollback
        odataReq.getBatchApplicationData().errors[changeset].push({ error: e, req })
      }
    } finally {
      req.messages && odataRes.setHeader('sap-messages', getSapMessages(req.messages, req._.req))

      if (err) next(err)
      else next(null, toODataResult(result))
    }
  }
}

module.exports = create
