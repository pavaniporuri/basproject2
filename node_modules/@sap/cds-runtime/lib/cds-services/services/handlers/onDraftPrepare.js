const cds = require('../../../cds')
const { SELECT } = cds.ql

const { isActiveEntityRequested } = require('../utils/draftWhereUtils')
const { ensureDraftsSuffix, ensureNoDraftsSuffix } = require('../utils/draftUtils')
const utilsColumns = require('../utils/columns')

const { DRAFT_COLUMNS_CQN } = require('../../../common/constants/draft')

/**
 * Generic Handler for PreparationAction requests.
 * In case of success it returns the prepared draft entry.
 */
const _handler = async function (req) {
  if (req.query.SELECT.from.ref.length > 1 || isActiveEntityRequested(req.query.SELECT.from.ref[0].where || [])) {
    req.reject(400, 'Action "draftPrepare" can only be called on a draft entity')
  }

  const columns = [
    ...utilsColumns(this.model.definitions[ensureNoDraftsSuffix(req.target.name)], {
      removeIgnore: true,
      filterVirtual: true
    }).map(obj => obj.name),
    ...DRAFT_COLUMNS_CQN.filter(column => column.ref[0] !== 'DraftAdministrativeData_DraftUUID')
  ]
  const select = SELECT.from(ensureDraftsSuffix(req.target.name))
    .columns(columns)
    .where(req.query.SELECT.from.ref[0].where)

  return cds
    .tx(req)
    .run(select)
    .then(result => {
      if (result.length === 0) {
        req.reject(404)
      }

      return result[0]
    })
}

// REVISIT: draftPrepare -> PREPARE?!

const { ODATA, COMMON } = require('../../../common/constants/annotation')
const _relevant = e => e[ODATA.DRAFT] || e[COMMON.DRAFT_NODE.PREP_ACTION]

module.exports = function () {
  for (const entity of Object.values(this.entities).filter(_relevant)) {
    this.on('draftPrepare', entity, _handler)
  }
}
