const { ensureUnlocalized } = require('../common/utils/draft')
const { redirect } = require('../db/utils/localized')

const getLocalize = (locale, model) => name => {
  if (name.endsWith('_drafts')) return name

  // if we get here via onReadDraft, target is already localized
  // because of subrequest using SELECT.from as new target
  const target = model.definitions[ensureUnlocalized(name)]
  const localizedView = target && target['@cds.localized'] !== false && model.definitions[`localized.${name}`]

  return localizedView ? localizedView.name : name
}

const _handler = function (req) {
  // do simple checks upfront and exit early
  if (!req.query || typeof req.query === 'string') return
  if (!req.query.SELECT) return
  if (!req.user || !req.user.locale) return
  if (!this.model) return

  // prevent localization for pure counts
  const columns = req.query.SELECT.columns
  if (columns && columns.length === 1 && columns[0].func === 'count') return

  // prevent localization in "select for update"
  if (req.query.SELECT && req.query.SELECT.forUpdate) return

  redirect(req.query.SELECT, getLocalize(req.user.locale, this.model))
}

_handler._initial = true

module.exports = _handler
