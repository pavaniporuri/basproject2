'use strict';

const { forEachManagedAssociation } = require('./utils');

/**
 * This module runs through the model and for each managed assoication in it,
 * in case the foreign keys are structured, it is expanding them. Example:
 * entity A { 
 *  toB: association to B { stru };
 * } // -> CSN: keys:[ { ref:['stru'] } ]
 * 
 * entity B { 
 *  stru: { 
 *    subid: Integer;
 *  }
 * }
 * after expand -> keys:[ { ref: ['stru_subid'] } ]
 */
module.exports = function (csn, referenceFlattener, csnUtils) {

  forEachManagedAssociation(csn, (element) => {
    if (element.keys) {
      expandStructuredKeysForAssociation(element, referenceFlattener);
    }
  });

  // update paths and resolve references
  referenceFlattener.attachPaths(csn);
  referenceFlattener.resolveAllReferences(csn, csnUtils.inspectRef, csnUtils.isStructured);

  function expandStructuredKeysForAssociation(assoc, referenceFlattener) {
    let newKeys = [];
    for (let key of assoc.keys) {
      // when are assigned $paths and when not???
      let paths = key.$paths;
      if (paths) {
        let lastPath = paths[paths.length - 1];
        let generatedElements = referenceFlattener.getGeneratedElementsForPath(lastPath);
        if (generatedElements) {
          generatedElements.forEach(elementName => {
            newKeys.push({ ref: [elementName], as: elementName });
          })
          continue;
        }
      }
      newKeys.push(key);
    }

    if (newKeys.length) {
      referenceFlattener.attachPaths(newKeys, assoc.keys.$path)
      assoc.keys = newKeys;
    }
  }
}
