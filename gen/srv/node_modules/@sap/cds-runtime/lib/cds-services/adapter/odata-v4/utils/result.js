const getTemplate = require('../../../../common/utils/template')
const templateProcessor = require('../../../../common/utils/templateProcessor')

const METADATA = {
  $context: '*@odata.context',
  $count: '*@odata.count',
  $etag: '*@odata.etag',
  $metadataEtag: '*@odata.metadataEtag',
  $bind: '*@odata.bind',
  $id: '*@odata.id',
  $delta: '*@odata.delta',
  $removed: '*@odata.removed',
  $type: '*@odata.type',
  $nextLink: '*@odata.nextLink',
  $deltaLink: '*@odata.deltaLink',
  $editLink: '*@odata.editLink',
  $readLink: '*@odata.readLink',
  $navigationLink: '*@odata.navigationLink',
  $associationLink: '*@odata.associationLink',
  $mediaEditLink: '*@odata.mediaEditLink',
  $mediaReadLink: '*@odata.mediaReadLink',
  $mediaContentType: '*@odata.mediaContentType',
  $mediaEtag: '*@odata.mediaEtag'
}

/**
 * Convert any result to the result object structure, which is expected of odata-v4.
 * @param {*} result
 * @param {*} [arg]
 * @return {string|object}
 */
const toODataResult = (result, arg) => {
  if (result === undefined || result === null) return ''

  if (arg) {
    if (typeof arg === 'object') {
      arg = arg._.odataReq.getUriInfo().getLastSegment().isCollection() ? 'Array' : ''
    }
    if (!Array.isArray(result) && arg === 'Array') {
      result = [result]
    } else if (Array.isArray(result) && arg !== 'Array') {
      result = result[0]
    }
  }

  const odataResult = {
    value: result
  }

  if (typeof result === 'object') {
    for (const key in METADATA) {
      if (key in result) {
        odataResult[METADATA[key]] = result[key]
        delete result[key]
      }
    }
  }

  return odataResult
}

const getVirtualsFromResult = ({ elements }, result) => {
  const virtuals = {}
  for (const k in elements) {
    if (elements[k].virtual) virtuals[k] = result[k]
  }
  return virtuals
}

const _processorFn = (errors, req) => {
  return (rows, key) => {
    if (!Array.isArray(rows)) rows = [rows]
    for (const row of rows) {
      if (row && row[key]) row['*@odata.etag'] = row[key]
    }
  }
}

const _pick = (element, _, parent, templateElements) => {
  return element['@odata.etag']
}

const addEtags = (odataReq, req, result, service) => {
  if (odataReq.getConcurrentResource() !== null) {
    const template = getTemplate('etags', service, req.target, { pick: _pick })
    if (template.elements.size !== 0) {
      const args = {
        processFn: _processorFn([], req),
        row: result.value || result,
        template
      }
      templateProcessor(args)
    }
  }
}

module.exports = {
  toODataResult,
  getVirtualsFromResult,
  addEtags
}
