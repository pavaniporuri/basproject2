const { FIORI } = require('../../../common/constants/annotation')
const { DRAFT_COLUMNS } = require('../../../common/constants/draft')

const { getKeyData } = require('./draftWhereUtils')
const { ensureDraftsSuffix, ensureNoDraftsSuffix } = require('./draftUtils')
const getColumns = require('./columns')
const cds = require('../../../cds')
const { SELECT } = cds.ql

const _getRootCQN = (context, requestActiveData) => {
  const keys = Object.keys(context.target.keys).filter(key => key !== 'IsActiveEntity')
  const keyData = getKeyData(keys, context.query.SELECT.from.ref[0].where)
  const columns = getColumns(context.target, { onlyNames: true, filterVirtual: true })
  return SELECT.from(
    requestActiveData ? ensureNoDraftsSuffix(context.target.name) : ensureDraftsSuffix(context.target.name),
    columns
  ).where(keyData)
}

const _getExpandSubCqn = (model, parentEntityName, targets, isRoot = true) => {
  const result = []
  const parentEntity = model[parentEntityName]

  for (const element of Object.values(parentEntity.elements)) {
    const { name, target, cardinality } = element
    if (DRAFT_COLUMNS.includes(name)) {
      continue
    }

    const ref = { ref: [name] }
    if (element.isComposition && cardinality && !targets.includes(target)) {
      if (name === 'texts' && !parentEntity[FIORI.DRAFT]) {
        continue
      }

      ref.expand = _getExpandSubCqn(model, target, [...targets, parentEntityName], false)
      result.push(ref)
    } else if (!isRoot && !element.isAssociation) {
      result.push(ref)
    }
  }

  return result
}

const _getDraftAdminRef = () => {
  return {
    ref: ['DraftAdministrativeData'],
    expand: [{ ref: ['DraftUUID'] }, { ref: ['InProcessByUser'] }]
  }
}

const _removeIsActiveEntityRecursively = resultSet => {
  resultSet.forEach(result => {
    delete result.IsActiveEntity
    Object.values(result).forEach(val => {
      if (Array.isArray(val)) {
        _removeIsActiveEntityRecursively(val)
      }
    })
  })
}

const readDraftCompositionTree = async (service, req) => {
  let draftData, activeData, adminData

  const expanded = _getExpandSubCqn(service.model.definitions, ensureNoDraftsSuffix(req.target.name), [])

  const cqnDraft = _getRootCQN(req, false)
  cqnDraft.SELECT.columns.push(_getDraftAdminRef())
  cqnDraft.SELECT.columns.push(...expanded)

  const cqnActive = _getRootCQN(req, true)
  cqnActive.SELECT.columns.push(...expanded)

  const dbtx = cds.tx(req)

  const results = await Promise.all([dbtx.run(cqnDraft), dbtx.run(cqnActive)])

  if (results[0].length === 1) {
    _removeIsActiveEntityRecursively(results[0])

    adminData = results[0][0].DraftAdministrativeData
    delete results[0][0].DraftAdministrativeData
    draftData = results[0][0]
  }

  if (results[1].length === 1) {
    activeData = results[1][0]
  }

  return { draftData, activeData, adminData }
}

module.exports = {
  readDraftCompositionTree
}
