/*
 * handler for filtering virtual fields by READ
 */

const _filter = (columns, target) => {
  let i = 0
  while (i < columns.length) {
    const col = columns[i]
    if (col.ref) {
      const element = target.elements[col.ref[0]]
      if (element && element.virtual) {
        columns.splice(columns.indexOf(col), 1)
        i--
      }
      if (col.expand && element && element.isAssociation) {
        _filter(col.expand, element._target)
      }
    }
    i++
  }
}

const filterVirtual = function (req) {
  // target.name ensures it is not a union or join
  if (typeof req.query === 'string' || !req.target || typeof req.target.name !== 'string') return
  if (req.query.SELECT && !req.query.SELECT.columns) return

  let target = req.target
  if (target._unresolved) {
    // > try to find target
    target = this.model.definitions[target.name.replace(/_drafts$/, '')]
  }
  if (!target) return

  _filter(req.query.SELECT.columns, target)
}

filterVirtual._initial = true

module.exports = filterVirtual
