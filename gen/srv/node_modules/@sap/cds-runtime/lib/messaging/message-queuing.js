const cds = require('../cds.js')
const BaseMessaging = require('./BaseMessaging')
const AMQPClient = require('./common-utils/AMQPClient.js')

const optionsMessaging = require('./message-queuing-utils/options-messaging.js')
const optionsManagement = require('./message-queuing-utils/options-management.js')
const authorizedRequest = require('./common-utils/authorizedRequest')
const optionsForSubDomain = require('./common-utils/optionsForSubDomain')
const LOG = cds.log('messaging')

class MQManagement {
  constructor(options) {
    this.options = optionsManagement(options)
    this.queueConfig = options.queueConfig
  }

  putQueue(queueName) {
    return authorizedRequest({
      method: 'PUT',
      uri: this.options.url,
      path: `/v1/management/queues/${encodeURIComponent(queueName)}`,
      oa2: this.options.auth.oauth2,
      dataObj: this.queueConfig,
      attemptInfo: () => LOG._debug && LOG.debug('Putting queue "' + queueName + '".'),
      rejectString: `Queue "${queueName}" could not be created.`,
      successString: `Queue "${queueName}" created.`,
      tokenStore: this
    })
  }

  addSubscription(queueName, topicPattern) {
    return authorizedRequest({
      method: 'PUT',
      uri: this.options.url,
      path: `/v1/management/queues/${encodeURIComponent(queueName)}/subscriptions/topics/${encodeURIComponent(
        topicPattern
      )}`,
      oa2: this.options.auth.oauth2,
      attemptInfo: () =>
        LOG._debug && LOG.debug('Adding subscription "' + topicPattern + '" to queue "' + queueName + '".'),
      rejectString: `Subscription "${topicPattern}" could not be added to queue "${queueName}".`,
      successString: `Subscription "${topicPattern}" added to queue "${queueName}".`,
      tokenStore: this
    })
  }

  deleteQueue(queueName) {
    return authorizedRequest({
      method: 'DELETE',
      uri: this.options.url,
      path: `/v1/management/queues/${encodeURIComponent(queueName)}`,
      oa2: this.options.auth.oauth2,
      attemptInfo: () => LOG._debug && LOG.debug('Deleting queue "' + queueName + '".'),
      rejectString: `Queue "${queueName}" could not be deleted.`,
      successString: `Queue "${queueName}" deleted.`,
      tokenStore: this
    })
  }
}

class MessageQueuing extends BaseMessaging {
  getClient(subDomain) {
    const optionsAMQP = optionsMessaging(this.options)
    const opts = subDomain ? optionsForSubDomain.amqpForSubDomain(optionsAMQP) : optionsAMQP
    return new AMQPClient(opts, this.optionsApp, { topic: 'topic://', queue: 'queue://' })
  }

  getManagement() {
    return new MQManagement(this.options)
  }

  get keepConnection() {
    return true
  }
}

module.exports = MessageQueuing
