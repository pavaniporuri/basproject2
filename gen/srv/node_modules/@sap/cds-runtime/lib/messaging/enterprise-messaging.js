const EnterpriseMessagingShared = require('./enterprise-messaging-shared.js')
const AMQPWebhookClient = require('./common-utils/AMQPWebhookClient.js')
const optionsMessaging = require('./enterprise-messaging-utils/options-messaging.js')
const optionsForSubDomain = require('./common-utils/optionsForSubDomain')
const EMManagement = require('./enterprise-messaging-utils/EMManagement.js')

class EMManagementMT extends EMManagement {
  putQueue() {
    throw new Error(
      'The inbound adapter for multitenant-enabled `enterprise-messaging` is not yet implemented. For single tenancy, you can use the kind `enterprise-messaging-shared`.'
    )
  }
}

class EnterpriseMessaging extends EnterpriseMessagingShared {
  getClient(subDomain) {
    const optionsAMQP = this.optionsAMQP || (this.optionsAMQP = optionsMessaging(this.options, 'amqp10ws'))
    const optionsMessagingREST =
      this.optionsMessagingREST || (this.optionsMessagingREST = optionsMessaging(this.options, 'httprest'))
    const optionsAMQPEnhanced = subDomain ? optionsForSubDomain.amqpForSubDomain(optionsAMQP, subDomain) : optionsAMQP
    return new AMQPWebhookClient({
      optionsMessagingREST,
      optionsAMQP: optionsAMQPEnhanced,
      optionsApp: this.optionsApp,
      queueName: this.queueName,
      path: `/webhooks/enterprise-messaging/${this.queueName}`,
      prefix: {
        topic: 'topic:',
        queue: 'queue:'
      }
    })
  }

  getManagement() {
    return new EMManagementMT(this.options)
  }

  get keepConnection() {
    return false
  }
}

module.exports = EnterpriseMessaging
