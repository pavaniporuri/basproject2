if (global.cds) Object.assign(module,{exports:global.cds}) ; else {

  const { extend, lazify, lazify:lazified } = require ('./core/lazy')
  const core = new class cds extends require('events'){}
  const c = lazy => cds.builtin.classes [lazy]
  require = lazified (module)  // eslint-disable-line

  /** cds is the central facade to all cds functions */
  const cds = module.exports = global.cds = extend (core) .with ({

    // Builtin types and classes
    builtin: require ('./core/csn'),
    service: lazy => extend (cds.builtin.classes.service) .with (lazified ({
      bindings: require ('./srv/bindings'),
      factory: require('./srv/factory'),
      providers:[],
      impl: x=>x,
    })),
    Association:c, Composition:c,
    entity:c,
    type:c,
    array:c,
    struct:c,

    // Model Reflection
    reflect: require ('./core/reflect'),
    linked: require ('./core/linked'),
    infer: require ('./core/infer'),

    // Loading and Compiling Models
    model: undefined,
    get: require ('./compile/from-files'), load: lazy => cds.get.inferred,
    parse: require ('./compile/parse'),
    compile: require ('./compile'),
    deploy: require ('./db/deploy'),

    // Providing and Consuming Services
    services: new class Iterable { *[Symbol.iterator]() {for (let e in this) yield this[e]}},
    serve: require ('./serve'),
    server: require ('../server'),
    connect: require ('./connect'),

    // Core Services API
    Service: require ('./srv/Service-api'),
    ApplicationService: lazy => module.require('@sap/cds-runtime/lib/cds-services/services/Service.js'),
    MessagingService: lazy => module.require('@sap/cds-runtime/lib/messaging/service.js'),
    DatabaseService: lazy => module.require('@sap/cds-runtime/lib/db/Service.js'),
    RemoteService: lazy => module.require('@sap/cds-runtime/lib/rest/service.js'),
    Request: require ('./req/impl'),
    Event: require ('./req/event'),
    User: require ('./req/user'),
    ql: require ('./ql'),

    // Helpers
    localize: require ('./utils/i18n'),
    resolve: require ('./utils/resolve'),
    error: require ('./utils/errors'),
    utils: require ('./utils/fs'),
    exec: require ('../bin/cds'),
    test: require ('./utils/tests'),
    log: require ('./utils/logging'), debug: lazy => cds.log.debug,
    clone: m => JSON.parse (JSON.stringify(m)),
    lazified, lazify, extend,

    // Configuration & Information
    env: require ('./env'),
    get requires(){ return this.env.requires }, // shortcut
    version: lazy => module.require('../package.json').version,
    home: lazy => __dirname.slice(0,-4),

    /** @type {import './srv/Request'} */
    get context(){ return module.require('./context').for(this) },
    set context(_){ module.require('./context').for(this,_) },
  })

  /** @type {import './srv/Service-api'} */
  const _missing = new Proxy ({},{ get:function _(t,p){ cds.error.no_primary_db(p,_) }})
  let db = _missing, _db = undefined
  extend (cds.__proto__) .with ({

    set db(v) { db = (_db=v) || _missing; if(v) {
      super.tx = db.tx.bind(db)
      super.run = db.run.bind(db)
      super.read = db.read.bind(db)
      super.insert = db.insert.bind(db)
      super.update = db.update.bind(db)
      super.delete = db.delete.bind(db)
    } else {
      super.tx = ()=>db.tx()
      super.run = ()=>db.run()
      super.read = ()=>db.read()
      super.insert = ()=>db.insert()
      super.update = ()=>db.update()
      super.delete = ()=>db.delete()
    }},

    get db() { return _db },
    get entities() { return db.entities },
    tx(..._) { return db.tx(..._) },
    run(..._) { return db.run(..._) },
    foreach(..._) { return db.foreach(..._) },
    stream(..._) { return db.stream(..._) },
    read(..._) { return db.read(..._) },
    insert(..._) { return db.insert(..._) },
    update(..._) { return db.update(..._) },
    delete(..._) { return db.delete(..._) },
    disconnect(..._) { return db.disconnect(..._) }

  })

  // legacy and to be moved stuff -> hidden for tools in cds.__proto__
  extend (cds.__proto__) .with (lazified ({
    /** @deprecated */ transaction(..._) { return this.db.transaction(..._) },
    /** @deprecated */ in: (cwd) => !cwd ? cds : {__proto__:cds, cwd, env: cds.env.for('cds',cwd) },
    /** @deprecated */ get config() { return this.env }, // REVISIT: Remove after November release
    get alpha_localized() { return module.require('./alpha/_localized') },
    build: require('./build'),
    mtx: require('./mtx'),
  }))

  // Add global forwards to cds.ql
  !['SELECT','INSERT','UPDATE','DELETE','CREATE','DROP'].forEach (p => Object.defineProperty (global, p, {
    get:() => Object.defineProperty (this,p,{ value:cds.ql[p] })[p],
    configurable: true
  }))

}
