'use strict';

const {
  forEachDefinition,
  forEachMember,
  hasBoolAnnotation
} = require('../model/csnUtils');

/**
 * Compares two models, in HANA-transformed CSN format, to each other.
 *
 * @param beforeModel the before-model
 * @param afterModel the after-model
 * @returns {object} the sets of deletions, extensions, and migrations of entities necessary to transform the before-model
 * to the after-model, together with all the definitions of the after-model
 */
function compareModels(beforeModel, afterModel) {
  const deletedEntities = Object.create(null);
  const elementAdditions = [];
  const elementChanges = [];

  // There is currently no use in knowing the added entities only. If this changes, hand in `addedEntities` to `getArtifactComparator` below.
  forEachDefinition(afterModel, getArtifactComparator(beforeModel, null, null, elementAdditions, elementChanges));       // (, alerts(afterModel))
  forEachDefinition(beforeModel, getArtifactComparator(afterModel, null, deletedEntities, null, null));       // (, alerts(beforeModel))

  const returnObj = Object.create(null);
  returnObj.definitions = afterModel.definitions;
  returnObj.deletions = deletedEntities;
  returnObj.extensions = elementAdditions;
  returnObj.migrations = elementChanges;
  return returnObj;
}

function getArtifactComparator(otherModel, addedEntities, deletedEntities, elementAdditions, elementChanges) {                              // (, alerts)
  return function compareArtifacts(artifact, name) {                                   // (, topKey, path)   topKey == 'definitions'
    const otherArtifact = otherModel.definitions[name];
    const isPersisted = isPersistedAsTable(artifact);
    const isPersistedOther = otherArtifact && isPersistedAsTable(otherArtifact);

    if (deletedEntities) {
      // Looking for deleted entities only.
      // Arguments are interchanged in this case: `artifact` from beforeModel and `otherArtifact` from afterModel.
      if (isPersisted && !isPersistedOther) {
        deletedEntities[name] = artifact;
      }
      return;
    }

    // Looking for added entities and added/deleted/changed elements.
    // Parameters: `artifact` from afterModel and `otherArtifact` from beforeModel.

    if (!isPersisted) {
      // Artifact not persisted in afterModel.
      return;
    }

    if (!isPersistedOther) {
      if (addedEntities) {
        addedEntities[name] = artifact;
      }
      return;
    }

    // Artifact changed?

    if (elementAdditions) {
      addElements();
    }
    if (elementChanges) {
      removeOrChangeElements();
    }

    function addElements() {
      const elements = {};
      forEachMember(artifact, getElementComparator(otherArtifact, elements));
      if (Object.keys(elements).length > 0) {
        elementAdditions.push({
          extend: name,
          elements: elements
        });
      }
    }

    function removeOrChangeElements() {
      const removedElements = {};
      const changedElements = {};
      const modification = { migrate: name };

      forEachMember(otherArtifact, getElementComparator(artifact, removedElements));
      if (Object.keys(removedElements).length > 0) {
        modification.remove = removedElements;
      }

      forEachMember(artifact, getElementComparator(otherArtifact, null, changedElements));
      if (Object.keys(changedElements).length > 0) {
        modification.change = changedElements;
      }

      if (modification.remove || modification.change) {
        elementChanges.push(modification);
      }
    }
  };
}

function isPersistedAsTable(artifact) {
  return artifact.kind === 'entity'
      && !artifact._ignore
      && !artifact.abstract
      && (!artifact.query || hasBoolAnnotation(artifact, '@cds.persistence.table'))
      && !hasBoolAnnotation(artifact, '@cds.persistence.skip')
      && !hasBoolAnnotation(artifact, '@cds.persistence.exists');
}

function getElementComparator(otherArtifact, addedElements = null, changedElements = null) {                    // (, alerts)
  return function compareElements(element, name) {                                     // (, topKey, path)   topKey == 'elements'
    if (element._ignore) {
      return;
    }

    const otherElement = otherArtifact.elements[name];
    if (otherElement && !otherElement._ignore) {
      // Element type changed?
      if (!changedElements) {
        return;
      }
      if (otherElement.type !== element.type || JSON.stringify(otherElement) !== JSON.stringify(element)) {
        // Type or parameters, e.g. association target, changed.
        changedElements[name] = changedElement(element, otherElement);
      }

      return;
    }

    if (addedElements) {
      addedElements[name] = element;
    }
  }
}

function changedElement(element, otherElement) {
  return {
    old: otherElement,
    new: element
  };
}

module.exports = {
  compareModels
};
