"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isIdenticalTenant = exports.tenantFromJwt = exports.tenantName = exports.tenantId = exports.mappingTenantFields = void 0;
var jwt_1 = require("./jwt");
/**
 * Mapping between key name in the Tenant and key name in decoded JWT and the
 */
exports.mappingTenantFields = {
    id: { keyInJwt: 'zid', extractorFunction: tenantId },
    name: { keyInJwt: 'zdn', extractorFunction: tenantName }
};
/**
 * Get the tenant id of a decoded JWT.
 * @param decodedToken - Token to read the tenant id from.
 * @returns The tenant id if available.
 */
function tenantId(decodedToken) {
    return jwt_1.readPropertyWithWarn(decodedToken, exports.mappingTenantFields.id.keyInJwt);
}
exports.tenantId = tenantId;
/**
 * Get the tenant name of a decoded JWT.
 * @param decodedToken - Token to read the tenant id from.
 * @returns The tenant id if available.
 */
function tenantName(decodedToken) {
    var extAttr = jwt_1.readPropertyWithWarn(decodedToken, 'ext_attr');
    if (extAttr) {
        return jwt_1.readPropertyWithWarn(extAttr, 'zdn');
    }
    return undefined;
}
exports.tenantName = tenantName;
/**
 * Creates a tenant object from the decoded JWT.
 *
 * @param decodedJWT - Decoded JWT token
 * @returns Representation of the tenant.
 * @exception Error Raised if no id is found in the decoded JWT.
 */
function tenantFromJwt(decodedJWT) {
    jwt_1.checkMandatoryValue('id', exports.mappingTenantFields, decodedJWT);
    return {
        id: tenantId(decodedJWT),
        name: tenantName(decodedJWT)
    };
}
exports.tenantFromJwt = tenantFromJwt;
/**
 * Compare two decoded JWTs based on their tenantIds.
 * @param decodedUserToken - User JWT
 * @param decodedProviderToken - Provider JWT
 * @returns Whether the tenant is identical.
 */
function isIdenticalTenant(decodedUserToken, decodedProviderToken) {
    return (jwt_1.readPropertyWithWarn(decodedUserToken, exports.mappingTenantFields.id.keyInJwt) ===
        jwt_1.readPropertyWithWarn(decodedProviderToken, exports.mappingTenantFields.id.keyInJwt));
}
exports.isIdenticalTenant = isIdenticalTenant;
//# sourceMappingURL=tenant.js.map